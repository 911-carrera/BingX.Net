<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BingX.Net</name>
    </assembly>
    <members>
        <member name="T:BingX.Net.BingXEnvironment">
            <summary>
            BingX environments
            </summary>
        </member>
        <member name="P:BingX.Net.BingXEnvironment.RestClientAddress">
            <summary>
            Rest API address
            </summary>
        </member>
        <member name="P:BingX.Net.BingXEnvironment.SocketClientAddress">
            <summary>
            Socket API address
            </summary>
        </member>
        <member name="P:BingX.Net.BingXEnvironment.Live">
            <summary>
            Live environment
            </summary>
        </member>
        <member name="M:BingX.Net.BingXEnvironment.CreateCustom(System.String,System.String,System.String)">
            <summary>
            Create a custom environment
            </summary>
            <param name="name"></param>
            <param name="spotRestAddress"></param>
            <param name="spotSocketStreamsAddress"></param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Clients.BingXRestClient">
            <inheritdoc cref="T:BingX.Net.Interfaces.Clients.IBingXRestClient" />
        </member>
        <member name="P:BingX.Net.Clients.BingXRestClient.SpotApi">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.BingXRestClient.FuturesApi">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClient.#ctor(System.Action{BingX.Net.Objects.Options.BingXRestOptions})">
            <summary>
            Create a new instance of the BingXRestClient using provided options
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClient.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory,System.Action{BingX.Net.Objects.Options.BingXRestOptions})">
            <summary>
            Create a new instance of the BingXRestClient using provided options
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="loggerFactory">The logger factory</param>
            <param name="httpClient">Http client for this client</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClient.SetDefaultOptions(System.Action{BingX.Net.Objects.Options.BingXRestOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.BingXSocketClient">
            <inheritdoc cref="T:BingX.Net.Interfaces.Clients.IBingXSocketClient" />
        </member>
        <member name="P:BingX.Net.Clients.BingXSocketClient.SpotApi">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.BingXSocketClient.FuturesApi">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create a new instance of BingXSocketClient
            </summary>
            <param name="loggerFactory">The logger factory</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.#ctor(System.Action{BingX.Net.Objects.Options.BingXSocketOptions})">
            <summary>
            Create a new instance of BingXSocketClient
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.#ctor(System.Action{BingX.Net.Objects.Options.BingXSocketOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create a new instance of BingXSocketClient
            </summary>
            <param name="loggerFactory">The logger factory</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.SetDefaultOptions(System.Action{BingX.Net.Objects.Options.BingXSocketOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi">
            <inheritdoc cref="T:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApi" />
        </member>
        <member name="P:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.Account">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.Trading">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApiAccount">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApiTrading">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.FuturesApi.BingXSocketClientFuturesApi">
            <summary>
            Client providing access to the BingX futures websocket Api
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXSocketClientFuturesApi.#ctor(Microsoft.Extensions.Logging.ILogger,BingX.Net.Objects.Options.BingXSocketOptions)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXSocketClientFuturesApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXSocketClientFuturesApi.GetListenerIdentifier(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXSocketClientFuturesApi.GetAuthenticationRequest">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi">
            <inheritdoc cref="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi" />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.Account">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.Trading">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="E:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client. Only available for Spot orders
            </summary>
        </member>
        <member name="E:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.OnOrderCanceled">
            <summary>
            Event triggered when an order is canceled via this client. Note that this does not trigger when using CancelAllOrdersAsync. Only available for Spot orders
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.TryParseError(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.CommonSpotClient">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.GetSymbolName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{BingX.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.String,System.String,System.Nullable{BingX.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetAssetsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.WithdrawAsync(System.String,System.String,System.Decimal,BingX.Net.Enums.AccountType,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.TransferAsync(BingX.Net.Enums.TransferType,System.String,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetTransfersAsync(BingX.Net.Enums.TransferType,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.TransferInternalAsync(System.String,BingX.Net.Enums.AccountIdentifierType,System.String,System.Decimal,BingX.Net.Enums.AccountType,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.GetInternalTransfersAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.StartUserStreamAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetSymbolsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetRecentTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetAggregatedOrderBookAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetKlinesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetTickersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetLastTradeAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi">
            <summary>
            Client providing access to the BingX spot websocket Api
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.#ctor(Microsoft.Extensions.Logging.ILogger,BingX.Net.Objects.Options.BingXSocketOptions)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.CreateSerializer">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.CreateAccessor">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXTradeUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToKlineUpdatesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXKlineUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXOrderBook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXPriceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXBookTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.PreprocessStreamMessage(System.Net.WebSockets.WebSocketMessageType,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.GetListenerIdentifier(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.GetAuthenticationRequest">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Enums.AccountIdentifierType">
            <summary>
            Account identifier type
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AccountIdentifierType.Uid">
            <summary>
            Unique id
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AccountIdentifierType.PhoneNumber">
            <summary>
            Phone number
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AccountIdentifierType.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AccountType.Funding">
            <summary>
            Funding account
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AccountType.Standard">
            <summary>
            Standard account
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.AccountType.Perpetual">
            <summary>
            Perpetual account
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.DepositStatus">
            <summary>
            Deposit status
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.DepositStatus.InProgress">
            <summary>
            In progress
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.DepositStatus.ChainUploaded">
            <summary>
            Chain uploaded
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.DepositStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.InternalTransferStatus">
            <summary>
            Internal transfer status
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.InternalTransferStatus.PendingReview">
            <summary>
            Pending review
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.InternalTransferStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.InternalTransferStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.KlineInterval">
            <summary>
            Kline interval
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.OneMinute">
            <summary>
            One minute
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.ThreeMinutes">
            <summary>
            Three minutes
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.FiveMinutes">
            <summary>
            Five minutes
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.FifteenMinutes">
            <summary>
            Fifteen minutes
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.ThirtyMinutes">
            <summary>
            Thirty minutes
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.OneHour">
            <summary>
            One hour
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.TwoHours">
            <summary>
            Two hours
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.FourHours">
            <summary>
            Four hours
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.SixHours">
            <summary>
            Six hours
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.EightHours">
            <summary>
            Eight hours
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.TwelveHours">
            <summary>
            Twelve hours
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.OneDay">
            <summary>
            One day
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.ThreeDay">
            <summary>
            Three days
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.OneWeek">
            <summary>
            One week
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.KlineInterval.OneMonth">
            <summary>
            One month
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.SymbolStatus">
            <summary>
            Status of a symbol
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.SymbolStatus.Offline">
            <summary>
            Offline
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.SymbolStatus.Online">
            <summary>
            Online
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.SymbolStatus.PreOpen">
            <summary>
            Pre-open
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.SymbolStatus.Suspended">
            <summary>
            Trading suspended
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.TransferType">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TransferType.FundingToStandardFutures">
            <summary>
            Funding Account -> Standard Contract
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TransferType.StandardFuturesToFunding">
            <summary>
            Standard Contract -> Funding Account
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TransferType.FundingToPerpetualFutures">
            <summary>
            Funding Account -> Perpetual Futures
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TransferType.PerpetualFuturesToFunding">
            <summary>
            Perpetual Futures -> Funding Account
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TransferType.StandardFuturesToPerpetualFutures">
            <summary>
            Standard Contract -> Perpetual Futures
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.TransferType.PerpetualFuturesToStandardFutures">
            <summary>
            Perpetual Futures -> Standard Contract
            </summary>
        </member>
        <member name="T:BingX.Net.Enums.WithdrawalStatus">
            <summary>
            Withdrawal status
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.WithdrawalStatus.UnderReview">
            <summary>
            Under review
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.WithdrawalStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.WithdrawalStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:BingX.Net.ExtensionMethods.BingXExtensionMethods">
            <summary>
            Extension methods specific to using the BingX API
            </summary>
        </member>
        <member name="T:BingX.Net.ExtensionMethods.CryptoClientExtensions">
            <summary>
            Extensions for the ICryptoRestClient and ICryptoSocketClient interfaces
            </summary>
        </member>
        <member name="M:BingX.Net.ExtensionMethods.CryptoClientExtensions.BingX(CryptoExchange.Net.Interfaces.ICryptoRestClient)">
            <summary>
            Get the BingX REST Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.ExtensionMethods.CryptoClientExtensions.BingX(CryptoExchange.Net.Interfaces.ICryptoSocketClient)">
            <summary>
            Get the BingX Websocket Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApi">
            <summary>
            BingX futures API endpoints
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market data
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApiAccount">
            <summary>
            BingX futures account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApiExchangeData">
            <summary>
            BingX futures exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            
            <para><a href="BingX" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApiTrading">
            <summary>
            BingX futures trading endpoints, placing and mananging orders.
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.FuturesApi.IBingXSocketClientFuturesApi">
            <summary>
            BingX futures streams
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.IBingXRestClient">
            <summary>
            Client for accessing the BingX Rest API. 
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.IBingXRestClient.SpotApi">
            <summary>
            Spot API endpoints
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.IBingXRestClient.FuturesApi">
            <summary>
            Futures API endpoints
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.IBingXRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.IBingXSocketClient">
            <summary>
            Client for accessing the BingX websocket API
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.IBingXSocketClient.SpotApi">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.IBingXSocketClient.FuturesApi">
            <summary>
            Futures streams
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.IBingXSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi">
            <summary>
            BingX Spot API endpoints
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi.CommonSpotClient">
            <summary>
            Get the ISpotClient for this client. This is a common interface which allows for some basic operations without knowing any details of the exchange.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount">
            <summary>
            BingX Spot account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get balances
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/account-api.html#Query%20Assets" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetDepositHistoryAsync(System.String,System.Nullable{BingX.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get deposit history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/wallet-api.html#Deposit%20History(supporting%20network)" /></para>
            </summary>
            <param name="asset"></param>
            <param name="status"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="offset"></param>
            <param name="limit"></param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetWithdrawalHistoryAsync(System.String,System.String,System.String,System.Nullable{BingX.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get withdrawal history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/wallet-api.html#Withdraw%20History%20(supporting%20network)" /></para>
            </summary>
            <param name="id"></param>
            <param name="asset"></param>
            <param name="clientOrderId"></param>
            <param name="status"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="offset"></param>
            <param name="limit"></param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetAssetsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get asset info
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/wallet-api.html#All%20Coins'%20Information" /></para>
            </summary>
            <param name="asset"></param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.WithdrawAsync(System.String,System.String,System.Decimal,BingX.Net.Enums.AccountType,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw funds
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/wallet-api.html#Withdraw" /></para>
            </summary>
            <param name="asset">The asset</param>
            <param name="address">Address to withdraw to</param>
            <param name="quantity">Quantity</param>
            <param name="walletType">Wallet type</param>
            <param name="network">Network to use</param>
            <param name="addressTag">Address tag</param>
            <param name="clientOrderId">Client order id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetDepositAddressAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get deposit addresses
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/wallet-api.html#Query%20Main%20Account%20Deposit%20Address" /></para>
            </summary>
            <param name="asset">The asset</param>
            <param name="offset">Offset</param>
            <param name="limit">Limit</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.TransferAsync(BingX.Net.Enums.TransferType,System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Universal transfer
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/account-api.html#User%20Universal%20Transfer" /></para>
            </summary>
            <param name="tranferType">Transfer type</param>
            <param name="asset">Asset to transfer</param>
            <param name="quantity">Quantity to transfer</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetTransfersAsync(BingX.Net.Enums.TransferType,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get universal transfer history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/account-api.html#Query%20User%20Universal%20Transfer%20History%20(USER_DATA)" /></para>
            </summary>
            <param name="type">Transaction type</param>
            <param name="transactionId">Filter by id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.TransferInternalAsync(System.String,BingX.Net.Enums.AccountIdentifierType,System.String,System.Decimal,BingX.Net.Enums.AccountType,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Transfer internal to an account on the BingX platform
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/account-api.html#User%20internal%20transfer" /></para>
            </summary>
            <param name="asset">Asset</param>
            <param name="targetAccountType">Target account type</param>
            <param name="targetAccount">Target account</param>
            <param name="quantity">Quantity</param>
            <param name="accountType">Source account type</param>
            <param name="areaCode">Area code for telephone, required when targetAccountType is PhoneNumber</param>
            <param name="clientOrderId">Client order id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.GetInternalTransfersAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get internal transfer history
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/account-api.html#Main%20Account%20Query%20Inner%20Transfer%20Records" /></para>
            </summary>
            <param name="asset">Asset</param>
            <param name="clientOrderId">Client order id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="offset">Offset</param>
            <param name="limit">Limit</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Generate a listen key used for subscribing to user data streams with the socket client
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/listenKey.html#generate%20Listen%20Key" /></para>
            </summary>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Extend the lifetime of a listenkey with 60 minutes
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/listenKey.html#extend%20Listen%20Key%20Validity%20period" /></para>
            </summary>
            <param name="listenKey">Listen key</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete a listenkey and stop the user data stream
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/listenKey.html#delete%20Listen%20Key" /></para>
            </summary>
            <param name="listenKey">Listen key</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData">
            <summary>
            BingX Spot exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            
            <para><a href="BingX" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetSymbolsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetRecentTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <param name="limit"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <param name="limit"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetKlinesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="symbol"></param>
            <param name="interval"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="limit"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetTickersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get ticker (24h price statistics)
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#24-hour%20price%20changes" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetAggregatedOrderBookAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get aggregated order book
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#Query%20Aggregate%20Depth" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="limit">Book depth</param>
            <param name="mergeDepth">0 is default precision, 1 to 5 are 10 to 100000 times precision respectively</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetLastTradeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the last trade
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#Latest%20Transaction%20Price" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the current best book prices
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#Best%20Order%20Book" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get historic trades
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/market-api.html#Query%20historical%20transaction%20records" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="limit">Amount or results</param>
            <param name="fromId">Return trades after this id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading">
            <summary>
            BingX Spot trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi">
            <summary>
            BingX spot streams
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXTradeUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live trade updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/market.html#Subscription%20transaction%20by%20transaction" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToKlineUpdatesAsync(System.String,BingX.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXKlineUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live kline/candlestick data updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/market.html#K-line%20Streams" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval to subscribe. Currently only the 1 minute interval is supported</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXOrderBook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live orderbook data updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/market.html#Subscribe%20Market%20Depth%20Data" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="depth">The depth of the orderbook, 5, 10, 20, 50 or 100</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live price statistics updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/market.html#Subscribe%20to%2024-hour%20Price%20Change" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXPriceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live price updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/market.html#Subscribe%20to%20Latest%20Trade%20Price" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXBookTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to live best book price updates
            <para><a href="https://bingx-api.github.io/docs/#/en-us/spot/socket/market.html#Subscribe%20to%20Best%20Order%20Book" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:BingX.Net.Interfaces.IBingXOrderBookFactory">
            <summary>
            BingX local order book factory
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.IBingXOrderBookFactory.CreateFutures(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <summary>
            Create a new futures local order book instance
            </summary>
            <param name="symbol"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.IBingXOrderBookFactory.CreateSpot(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <summary>
            Create a new spot local order book instance
            </summary>
            <param name="symbol"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Objects.BingXApiAddresses">
            <summary>
            Api addresses
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.BingXApiAddresses.RestClientAddress">
            <summary>
            The address used by the BingXRestClient for the API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.BingXApiAddresses.SocketClientAddress">
            <summary>
            The address used by the BingXSocketClient for the websocket API
            </summary>
        </member>
        <member name="F:BingX.Net.Objects.BingXApiAddresses.Default">
            <summary>
            The default addresses to connect to the BingX.com API
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXAsset">
            <summary>
            Asset info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXAsset.Name">
            <summary>
            Name 
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXAsset.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXAsset.Networks">
            <summary>
            Networks
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXNetwork">
            <summary>
            Network info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.Name">
            <summary>
            Network name
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.DepositEnabled">
            <summary>
            Is deposit enabled
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.MinDeposit">
            <summary>
            Minimal deposit amount
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.MinConfirmations">
            <summary>
            Min amount of confirmations
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.IsDefault">
            <summary>
            Is default network
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.WithdrawEnabled">
            <summary>
            Is withdrawing enabled
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.WithdrawFee">
            <summary>
            Withdrawal fee
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.MinWithdraw">
            <summary>
            Minimal withdrawal
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.MaxWithdraw">
            <summary>
            Max withdrawal
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.WithdrawDescription">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.WithdrawPrecision">
            <summary>
            Witdraw precision
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXNetwork.DepositPrecision">
            <summary>
            Deposit precision
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXBalance">
            <summary>
            Balance info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalance.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalance.Free">
            <summary>
            Free
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalance.Locked">
            <summary>
            Locked
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBalance.Total">
            <summary>
            Total
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXBookTicker">
            <summary>
            Best book prices
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTicker.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXBookTickerUpdate">
            <summary>
            Best book prices
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTickerUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTickerUpdate.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTickerUpdate.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTickerUpdate.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXBookTickerUpdate.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXDeposit">
            <summary>
            Deposit info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.Quantity">
            <summary>
            Quantity 
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.Network">
            <summary>
            Used network
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.Status">
            <summary>
            Current status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.Address">
            <summary>
            Deposit address
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.AddressTag">
            <summary>
            Address tag
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.SourceAddress">
            <summary>
            Source address
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.InsertTime">
            <summary>
            Insert time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.UnlockConfirmations">
            <summary>
            Confirmed times for unlocking
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDeposit.ConfirmedTimes">
            <summary>
            Network confirmations
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXDepositAddresses">
            <summary>
            Deposit addresses
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddresses.Total">
            <summary>
            Total
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddresses.Data">
            <summary>
            Results
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXDepositAddress">
            <summary>
            Deposit address
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddress.AssetId">
            <summary>
            Asset id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddress.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddress.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddress.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXDepositAddress.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXId">
            <summary>
            Id result
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXId.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXInternalTransfers">
            <summary>
            Transfers
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfers.Total">
            <summary>
            Total transfers
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfers.Transfers">
            <summary>
            Transfer list
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXInternalTransfer">
            <summary>
            Transfer info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfer.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfer.Quantity">
            <summary>
            Quantity transfered
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfer.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfer.ReceiverUid">
            <summary>
            Receiver
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXInternalTransfer.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXKline">
            <summary>
            Kline (candlestick) info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.OpenTime">
            <summary>
            Open timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.CloseTime">
            <summary>
            Close time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKline.QuoteVolume">
            <summary>
            Quote volume
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXKlineUpdate">
            <summary>
            Kline (candlestick) update
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdate.Kline">
            <summary>
            Kline data
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXKlineUpdateData">
            <summary>
            Kline (candlestick) info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.OpenTime">
            <summary>
            Open timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.CloseTime">
            <summary>
            Close time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.QuoteVolume">
            <summary>
            Quote volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXKlineUpdateData.TradeCount">
            <summary>
            Number of trades
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXLastTrade">
            <summary>
            Last trade info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTrade.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTrade.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTrade.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTrade.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTrade.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXLastTrade.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXOrderBook">
            <summary>
            Order book info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderBook.Bids">
            <summary>
            List of bids
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderBook.Asks">
            <summary>
            List of asks
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderBook.Timestamp">
            <summary>
            Timestamp of the data
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXOrderBookEntry">
            <summary>
            Order book entry
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderBookEntry.Price">
            <summary>
            The price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXOrderBookEntry.Quantity">
            <summary>
            The quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXPriceUpdate">
            <summary>
            Price update
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPriceUpdate.Event">
            <summary>
            Event name
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPriceUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXPriceUpdate.Price">
            <summary>
            The current last traded price
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXSocketUpdate">
            <summary>
            Socket update
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSocketUpdate.Event">
            <summary>
            Event name
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSocketUpdate.EventTime">
            <summary>
            Event timestamp
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXSymbol">
            <summary>
            BingX symbol info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.Name">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.MinOrderQuantity">
            <summary>
            Min order quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.MaxOrderQuantity">
            <summary>
            Max order quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.MinNotional">
            <summary>
            Min notional value of an order
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.MaxNotional">
            <summary>
            Max notional value of an order
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.Status">
            <summary>
            Symbol status
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.TickSize">
            <summary>
            Tick size
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.StepSize">
            <summary>
            Step size
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.ApiBuyable">
            <summary>
            Is this symbol buyable via the API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.ApiSellable">
            <summary>
            Is this symbol sellable via the API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXSymbol.TimeOnline">
            <summary>
            Time online
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTicker">
            <summary>
            24 hour price statistics
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.LastPrice">
            <summary>
            Last price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.PriceChange">
            <summary>
            Price change
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.PriceChangePercent">
            <summary>
            Price change percentage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.QuoteVolume">
            <summary>
            Quote volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.CloseTime">
            <summary>
            Close time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTicker.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTickerUpdate">
            <summary>
            Ticker information over last 24h
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.PriceChange">
            <summary>
            Price change
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.PriceChangePercentage">
            <summary>
            Price change percentage
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.LastPrice">
            <summary>
            Last trade price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.QuoteVolume">
            <summary>
            Quote volume
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.CloseTime">
            <summary>
            Close time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.BestBidQuantity">
            <summary>
            Best bid quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.BestAskQuantity">
            <summary>
            Best ask quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTickerUpdate.TradeCount">
            <summary>
            Trade count
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTrade">
            <summary>
            Trade info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTrade.Id">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTrade.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTrade.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTrade.Timestamp">
            <summary>
            timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTrade.BuyerIsMaker">
            <summary>
            Whether buyer was the maker
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTradeUpdate">
            <summary>
            Trade update info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradeUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradeUpdate.TradeId">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradeUpdate.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradeUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradeUpdate.TradeTime">
            <summary>
            Trade timestamp
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTradeUpdate.BuyerIsMaker">
            <summary>
            Whether buyer is maker
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTransactionResult">
            <summary>
            Transaction result
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransactionResult.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTransfers">
            <summary>
            Transfers
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfers.Total">
            <summary>
            Total transfers
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfers.Transfers">
            <summary>
            Transfer list
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXTransfer">
            <summary>
            Transfer info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfer.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfer.Quantity">
            <summary>
            Quantity transfered
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfer.Type">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfer.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXTransfer.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXWithdrawal">
            <summary>
            Withdrawal info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Address">
            <summary>
            Withdrawal address
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.ApplyTime">
            <summary>
            Apply time
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Network">
            <summary>
            Withdrawal network
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.transferType">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Confirmations">
            <summary>
            Confirmations
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.Info">
            <summary>
            Extra info
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawal.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Models.BingXWithdrawResult">
            <summary>
            Withdraw result
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawResult.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Models.BingXWithdrawResult.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Options.BingXOrderBookOptions">
            <summary>
            Options for the BingX SymbolOrderBook
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXOrderBookOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXOrderBookOptions.Limit">
            <summary>
            The top amount of results to keep in sync. If for example limit=10 is used, the order book will contain the 10 best bids and 10 best asks. Leaving this null will sync the full order book
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXOrderBookOptions.UpdateInterval">
            <summary>
            Update interval in milliseconds, either 100 or 1000. Defaults to 1000
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXOrderBookOptions.InitialDataTimeout">
            <summary>
            After how much time we should consider the connection dropped if no data is received for this time after the initial subscriptions
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Options.BingXRestOptions">
            <summary>
            Options for the BingXRestClient
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXRestOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXRestOptions.ReceiveWindow">
            <summary>
            The receive window
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXRestOptions.SpotOptions">
            <summary>
            Spot API options
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXRestOptions.FuturesOptions">
            <summary>
            Futures API options
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Options.BingXSocketOptions">
            <summary>
            Options for the BingXSocketClient
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXSocketOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXSocketOptions.SpotOptions">
            <summary>
            Options for the Spot API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXSocketOptions.FuturesOptions">
            <summary>
            Options for the Futures API
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.ListenerIdentifiers">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.GetMessageType(CryptoExchange.Net.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{`0}},System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="logger"></param>
            <param name="dataType"></param>
            <param name="listenId"></param>
            <param name="handler"></param>
            <param name="auth"></param>
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.GetSubQuery(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.GetUnsubQuery">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.DoHandleMessageAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Objects.Sockets.DataEvent{System.Object})">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook.#ctor(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook.#ctor(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions},Microsoft.Extensions.Logging.ILogger{BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook},BingX.Net.Interfaces.Clients.IBingXRestClient,BingX.Net.Interfaces.Clients.IBingXSocketClient)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="logger">Logger</param>
            <param name="restClient">Rest client instance</param>
            <param name="socketClient">Socket client instance</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory">
            <summary>
            BingX order book factory
            </summary>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory.#ctor(System.IServiceProvider)">
            <summary>
            ctor
            </summary>
            <param name="serviceProvider">Service provider for resolving logging and clients</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory.CreateSpot(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory.CreateFutures(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.#ctor(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.#ctor(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions},Microsoft.Extensions.Logging.ILogger{BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook},BingX.Net.Interfaces.Clients.IBingXRestClient,BingX.Net.Interfaces.Clients.IBingXSocketClient)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="logger">Logger</param>
            <param name="restClient">Rest client instance</param>
            <param name="socketClient">Socket client instance</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Extensions for DI
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddBingX(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BingX.Net.Objects.Options.BingXRestOptions},System.Action{BingX.Net.Objects.Options.BingXSocketOptions},System.Nullable{Microsoft.Extensions.DependencyInjection.ServiceLifetime})">
            <summary>
            Add the IBingXClient and IBingXSocketClient to the sevice collection so they can be injected
            </summary>
            <param name="services">The service collection</param>
            <param name="defaultRestOptionsDelegate">Set default options for the rest client</param>
            <param name="defaultSocketOptionsDelegate">Set default options for the socket client</param>
            <param name="socketClientLifeTime">The lifetime of the IBingXSocketClient for the service collection. Defaults to Singleton.</param>
            <returns></returns>
        </member>
    </members>
</doc>
