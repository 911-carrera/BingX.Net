<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BingX.Net</name>
    </assembly>
    <members>
        <member name="T:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi">
            <inheritdoc cref="T:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApi" />
        </member>
        <member name="P:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.Account">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.Trading">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApiAccount">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.FuturesApi.BingXRestClientFuturesApiTrading">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.FuturesApi.BingXSocketClientFuturesApi">
            <summary>
            Client providing access to the BingX futures websocket Api
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXSocketClientFuturesApi.#ctor(Microsoft.Extensions.Logging.ILogger,BingX.Net.Objects.Options.BingXSocketOptions)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXSocketClientFuturesApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXSocketClientFuturesApi.SubscribeToBingXUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXModel}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXSocketClientFuturesApi.GetListenerIdentifier(CryptoExchange.Net.Sockets.MessageParsing.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.FuturesApi.BingXSocketClientFuturesApi.GetAuthenticationRequest">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi">
            <inheritdoc cref="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi" />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.Account">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.Trading">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="E:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client. Only available for Spot orders
            </summary>
        </member>
        <member name="E:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.OnOrderCanceled">
            <summary>
            Event triggered when an order is canceled via this client. Note that this does not trigger when using CancelAllOrdersAsync. Only available for Spot orders
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.CommonSpotClient">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApi.GetSymbolName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiAccount">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXRestClientSpotApiTrading">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi">
            <summary>
            Client providing access to the BingX spot websocket Api
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.#ctor(Microsoft.Extensions.Logging.ILogger,BingX.Net.Objects.Options.BingXSocketOptions)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.SubscribeToBingXUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXModel}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.GetListenerIdentifier(CryptoExchange.Net.Sockets.MessageParsing.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.SpotApi.BingXSocketClientSpotApi.GetAuthenticationRequest">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.BingXRestClient">
            <inheritdoc cref="T:BingX.Net.Interfaces.Clients.IBingXRestClient" />
        </member>
        <member name="P:BingX.Net.Clients.BingXRestClient.SpotApi">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.BingXRestClient.FuturesApi">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClient.#ctor(System.Action{BingX.Net.Objects.Options.BingXRestOptions})">
            <summary>
            Create a new instance of the BingXRestClient using provided options
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClient.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory,System.Action{BingX.Net.Objects.Options.BingXRestOptions})">
            <summary>
            Create a new instance of the BingXRestClient using provided options
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="loggerFactory">The logger factory</param>
            <param name="httpClient">Http client for this client</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClient.SetDefaultOptions(System.Action{BingX.Net.Objects.Options.BingXRestOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Clients.BingXSocketClient">
            <inheritdoc cref="T:BingX.Net.Interfaces.Clients.IBingXSocketClient" />
        </member>
        <member name="P:BingX.Net.Clients.BingXSocketClient.SpotApi">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Clients.BingXSocketClient.FuturesApi">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.#ctor(System.Action{BingX.Net.Objects.Options.BingXSocketOptions})">
            <summary>
            Create a new instance of BingXSocketClient
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.#ctor(System.Action{BingX.Net.Objects.Options.BingXSocketOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create a new instance of BingXSocketClient
            </summary>
            <param name="loggerFactory">The logger factory</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.SetDefaultOptions(System.Action{BingX.Net.Objects.Options.BingXSocketOptions})">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.Clients.BingXSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Enums.BingXEnum">
            <summary>
            BingX
            </summary>
        </member>
        <member name="F:BingX.Net.Enums.BingXEnum.BingX">
            <summary>
            BingX
            </summary>
        </member>
        <member name="T:BingX.Net.ExtensionMethods.CryptoClientExtensions">
            <summary>
            Extensions for the ICryptoRestClient and ICryptoSocketClient interfaces
            </summary>
        </member>
        <member name="M:BingX.Net.ExtensionMethods.CryptoClientExtensions.BingX(CryptoExchange.Net.Interfaces.ICryptoRestClient)">
            <summary>
            Get the BingX REST Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.ExtensionMethods.CryptoClientExtensions.BingX(CryptoExchange.Net.Interfaces.ICryptoSocketClient)">
            <summary>
            Get the BingX Websocket Api client
            </summary>
            <param name="baseClient"></param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.ExtensionMethods.ServiceCollectionExtensions">
            <summary>
            Extensions for DI
            </summary>
        </member>
        <member name="M:BingX.Net.ExtensionMethods.ServiceCollectionExtensions.AddBingX(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{BingX.Net.Objects.Options.BingXRestOptions},System.Action{BingX.Net.Objects.Options.BingXSocketOptions},System.Nullable{Microsoft.Extensions.DependencyInjection.ServiceLifetime})">
            <summary>
            Add the IBingXClient and IBingXSocketClient to the sevice collection so they can be injected
            </summary>
            <param name="services">The service collection</param>
            <param name="defaultRestOptionsDelegate">Set default options for the rest client</param>
            <param name="defaultSocketOptionsDelegate">Set default options for the socket client</param>
            <param name="socketClientLifeTime">The lifetime of the IBingXSocketClient for the service collection. Defaults to Singleton.</param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.ExtensionMethods.BingXExtensionMethods">
            <summary>
            Extension methods specific to using the BingX API
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApi">
            <summary>
            BingX futures API endpoints
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market data
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApiAccount">
            <summary>
            BingX futures account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApiExchangeData">
            <summary>
            BingX futures exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            
            <para><a href="BingX" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.FuturesApi.IBingXRestClientFuturesApiTrading">
            <summary>
            BingX futures trading endpoints, placing and mananging orders.
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.FuturesApi.IBingXSocketClientFuturesApi">
            <summary>
            BingX futures streams
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.FuturesApi.IBingXSocketClientFuturesApi.SubscribeToBingXUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXModel}},System.Threading.CancellationToken)">
            <summary>
            
            <para><a href="BingX" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.IBingXRestClient">
            <summary>
            Client for accessing the BingX Rest API. 
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.IBingXRestClient.SpotApi">
            <summary>
            Spot API endpoints
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.IBingXRestClient.FuturesApi">
            <summary>
            Futures API endpoints
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.IBingXRestClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.IBingXSocketClient">
            <summary>
            Client for accessing the BingX websocket API
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.IBingXSocketClient.SpotApi">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.IBingXSocketClient.FuturesApi">
            <summary>
            Futures streams
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.IBingXSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi">
            <summary>
            BingX Spot API endpoints
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="P:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApi.CommonSpotClient">
            <summary>
            Get the ISpotClient for this client. This is a common interface which allows for some basic operations without knowing any details of the exchange.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiAccount">
            <summary>
            BingX Spot account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData">
            <summary>
            BingX Spot exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            
            <para><a href="BingX" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXRestClientSpotApiTrading">
            <summary>
            BingX Spot trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="T:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi">
            <summary>
            BingX spot streams
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.Clients.SpotApi.IBingXSocketClientSpotApi.SubscribeToBingXUpdatesAsync(System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{BingX.Net.Objects.Models.BingXModel}},System.Threading.CancellationToken)">
            <summary>
            
            <para><a href="BingX" /></para>
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:BingX.Net.Interfaces.IBingXOrderBookFactory">
            <summary>
            BingX local order book factory
            </summary>
        </member>
        <member name="M:BingX.Net.Interfaces.IBingXOrderBookFactory.CreateFutures(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <summary>
            Create a new futures local order book instance
            </summary>
            <param name="symbol"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:BingX.Net.Interfaces.IBingXOrderBookFactory.CreateSpot(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <summary>
            Create a new spot local order book instance
            </summary>
            <param name="symbol"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:BingX.Net.Objects.Options.BingXOrderBookOptions">
            <summary>
            Options for the BingX SymbolOrderBook
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXOrderBookOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXOrderBookOptions.Limit">
            <summary>
            The top amount of results to keep in sync. If for example limit=10 is used, the order book will contain the 10 best bids and 10 best asks. Leaving this null will sync the full order book
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXOrderBookOptions.UpdateInterval">
            <summary>
            Update interval in milliseconds, either 100 or 1000. Defaults to 1000
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXOrderBookOptions.InitialDataTimeout">
            <summary>
            After how much time we should consider the connection dropped if no data is received for this time after the initial subscriptions
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Options.BingXRestOptions">
            <summary>
            Options for the BingXRestClient
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXRestOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXRestOptions.SpotOptions">
            <summary>
            Spot API options
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXRestOptions.FuturesOptions">
            <summary>
            Futures API options
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Options.BingXSocketOptions">
            <summary>
            Options for the BingXSocketClient
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXSocketOptions.Default">
            <summary>
            Default options for new clients
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXSocketOptions.SpotOptions">
            <summary>
            Options for the Spot API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.Options.BingXSocketOptions.FuturesOptions">
            <summary>
            Options for the Futures API
            </summary>
        </member>
        <member name="T:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1">
            <inheritdoc />
        </member>
        <member name="P:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.ListenerIdentifiers">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.GetMessageType(CryptoExchange.Net.Sockets.MessageParsing.Interfaces.IMessageAccessor)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.String[],System.Action{CryptoExchange.Net.Objects.Sockets.DataEvent{`0}},System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="logger"></param>
            <param name="topics"></param>
            <param name="handler"></param>
            <param name="auth"></param>
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.GetSubQuery(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.GetUnsubQuery">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.Objects.Sockets.Subscriptions.BingXSubscription`1.DoHandleMessageAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Objects.Sockets.DataEvent{System.Object})">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.Objects.BingXApiAddresses">
            <summary>
            Api addresses
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.BingXApiAddresses.RestClientAddress">
            <summary>
            The address used by the BingXRestClient for the API
            </summary>
        </member>
        <member name="P:BingX.Net.Objects.BingXApiAddresses.SocketClientAddress">
            <summary>
            The address used by the BingXSocketClient for the websocket API
            </summary>
        </member>
        <member name="F:BingX.Net.Objects.BingXApiAddresses.Default">
            <summary>
            The default addresses to connect to the BingX.com API
            </summary>
        </member>
        <member name="T:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook.#ctor(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook.#ctor(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions},Microsoft.Extensions.Logging.ILogger{BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook},BingX.Net.Interfaces.Clients.IBingXRestClient,BingX.Net.Interfaces.Clients.IBingXSocketClient)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="logger">Logger</param>
            <param name="restClient">Rest client instance</param>
            <param name="socketClient">Socket client instance</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXFuturesSymbolOrderBook.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory">
            <summary>
            BingX order book factory
            </summary>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory.#ctor(System.IServiceProvider)">
            <summary>
            ctor
            </summary>
            <param name="serviceProvider">Service provider for resolving logging and clients</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory.CreateSpot(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXOrderBookFactory.CreateFutures(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.#ctor(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions})">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.#ctor(System.String,System.Action{BingX.Net.Objects.Options.BingXOrderBookOptions},Microsoft.Extensions.Logging.ILogger{BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook},BingX.Net.Interfaces.Clients.IBingXRestClient,BingX.Net.Interfaces.Clients.IBingXSocketClient)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="optionsDelegate">Option configuration delegate</param>
            <param name="logger">Logger</param>
            <param name="restClient">Rest client instance</param>
            <param name="socketClient">Socket client instance</param>
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.DoStartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.DoResyncAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:BingX.Net.SymbolOrderBooks.BingXSpotSymbolOrderBook.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:BingX.Net.BingXEnvironment">
            <summary>
            BingX environments
            </summary>
        </member>
        <member name="P:BingX.Net.BingXEnvironment.RestClientAddress">
            <summary>
            Rest API address
            </summary>
        </member>
        <member name="P:BingX.Net.BingXEnvironment.SocketClientAddress">
            <summary>
            Socket API address
            </summary>
        </member>
        <member name="P:BingX.Net.BingXEnvironment.Live">
            <summary>
            Live environment
            </summary>
        </member>
        <member name="M:BingX.Net.BingXEnvironment.CreateCustom(System.String,System.String,System.String)">
            <summary>
            Create a custom environment
            </summary>
            <param name="name"></param>
            <param name="spotRestAddress"></param>
            <param name="spotSocketStreamsAddress"></param>
            <returns></returns>
        </member>
    </members>
</doc>
